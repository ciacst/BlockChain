/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface StudentSocietyDAOInterface extends utils.Interface {
  functions: {
    "ACCESS_GAIN()": FunctionFragment;
    "PROPOSAL_COST()": FunctionFragment;
    "START_GAIN()": FunctionFragment;
    "STATE_ACCESS()": FunctionFragment;
    "STATE_UNACCESS()": FunctionFragment;
    "STATE_VOTING()": FunctionFragment;
    "UseLess()": FunctionFragment;
    "VOTE_COST()": FunctionFragment;
    "access_proposals_number(address)": FunctionFragment;
    "airdrop()": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "checkDate(uint256)": FunctionFragment;
    "dateOver(uint32,uint256)": FunctionFragment;
    "getTotal()": FunctionFragment;
    "judgeAccess(uint32)": FunctionFragment;
    "proposalInitiate(uint256,string,string,uint256)": FunctionFragment;
    "proposals(uint32)": FunctionFragment;
    "vote(uint32,uint32,uint256)": FunctionFragment;
    "voted_person(uint32,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "ACCESS_GAIN"
      | "PROPOSAL_COST"
      | "START_GAIN"
      | "STATE_ACCESS"
      | "STATE_UNACCESS"
      | "STATE_VOTING"
      | "UseLess"
      | "VOTE_COST"
      | "access_proposals_number"
      | "airdrop"
      | "balanceOf"
      | "checkDate"
      | "dateOver"
      | "getTotal"
      | "judgeAccess"
      | "proposalInitiate"
      | "proposals"
      | "vote"
      | "voted_person"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "ACCESS_GAIN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PROPOSAL_COST",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "START_GAIN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "STATE_ACCESS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "STATE_UNACCESS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "STATE_VOTING",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "UseLess", values?: undefined): string;
  encodeFunctionData(functionFragment: "VOTE_COST", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "access_proposals_number",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "airdrop", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "checkDate",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "dateOver",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "getTotal", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "judgeAccess",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "proposalInitiate",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "proposals",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "vote",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "voted_person",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "ACCESS_GAIN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PROPOSAL_COST",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "START_GAIN", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "STATE_ACCESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "STATE_UNACCESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "STATE_VOTING",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "UseLess", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "VOTE_COST", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "access_proposals_number",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "airdrop", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "checkDate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "dateOver", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getTotal", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "judgeAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposalInitiate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "proposals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "voted_person",
    data: BytesLike
  ): Result;

  events: {
    "ProposalInitiated(uint32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ProposalInitiated"): EventFragment;
}

export interface ProposalInitiatedEventObject {
  proposalIndex: number;
}
export type ProposalInitiatedEvent = TypedEvent<
  [number],
  ProposalInitiatedEventObject
>;

export type ProposalInitiatedEventFilter =
  TypedEventFilter<ProposalInitiatedEvent>;

export interface StudentSocietyDAO extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: StudentSocietyDAOInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ACCESS_GAIN(overrides?: CallOverrides): Promise<[number]>;

    PROPOSAL_COST(overrides?: CallOverrides): Promise<[number]>;

    START_GAIN(overrides?: CallOverrides): Promise<[number]>;

    STATE_ACCESS(overrides?: CallOverrides): Promise<[number]>;

    STATE_UNACCESS(overrides?: CallOverrides): Promise<[number]>;

    STATE_VOTING(overrides?: CallOverrides): Promise<[number]>;

    UseLess(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    VOTE_COST(overrides?: CallOverrides): Promise<[number]>;

    access_proposals_number(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    airdrop(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    checkDate(
      now_time: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    dateOver(
      index: PromiseOrValue<BigNumberish>,
      now_time: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getTotal(overrides?: CallOverrides): Promise<[number]>;

    judgeAccess(
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    proposalInitiate(
      duration: PromiseOrValue<BigNumberish>,
      name: PromiseOrValue<string>,
      introductions: PromiseOrValue<string>,
      start_time: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    proposals(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        string,
        BigNumber,
        BigNumber,
        string,
        string,
        number,
        number,
        number
      ] & {
        index: number;
        proposer: string;
        start_time: BigNumber;
        duration: BigNumber;
        name: string;
        introductions: string;
        agree: number;
        disagree: number;
        state: number;
      }
    >;

    vote(
      user_choice: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      now_time: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    voted_person(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  ACCESS_GAIN(overrides?: CallOverrides): Promise<number>;

  PROPOSAL_COST(overrides?: CallOverrides): Promise<number>;

  START_GAIN(overrides?: CallOverrides): Promise<number>;

  STATE_ACCESS(overrides?: CallOverrides): Promise<number>;

  STATE_UNACCESS(overrides?: CallOverrides): Promise<number>;

  STATE_VOTING(overrides?: CallOverrides): Promise<number>;

  UseLess(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  VOTE_COST(overrides?: CallOverrides): Promise<number>;

  access_proposals_number(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<number>;

  airdrop(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  balanceOf(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  checkDate(
    now_time: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  dateOver(
    index: PromiseOrValue<BigNumberish>,
    now_time: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getTotal(overrides?: CallOverrides): Promise<number>;

  judgeAccess(
    index: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  proposalInitiate(
    duration: PromiseOrValue<BigNumberish>,
    name: PromiseOrValue<string>,
    introductions: PromiseOrValue<string>,
    start_time: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  proposals(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      number,
      string,
      BigNumber,
      BigNumber,
      string,
      string,
      number,
      number,
      number
    ] & {
      index: number;
      proposer: string;
      start_time: BigNumber;
      duration: BigNumber;
      name: string;
      introductions: string;
      agree: number;
      disagree: number;
      state: number;
    }
  >;

  vote(
    user_choice: PromiseOrValue<BigNumberish>,
    index: PromiseOrValue<BigNumberish>,
    now_time: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  voted_person(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    ACCESS_GAIN(overrides?: CallOverrides): Promise<number>;

    PROPOSAL_COST(overrides?: CallOverrides): Promise<number>;

    START_GAIN(overrides?: CallOverrides): Promise<number>;

    STATE_ACCESS(overrides?: CallOverrides): Promise<number>;

    STATE_UNACCESS(overrides?: CallOverrides): Promise<number>;

    STATE_VOTING(overrides?: CallOverrides): Promise<number>;

    UseLess(overrides?: CallOverrides): Promise<void>;

    VOTE_COST(overrides?: CallOverrides): Promise<number>;

    access_proposals_number(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<number>;

    airdrop(overrides?: CallOverrides): Promise<void>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkDate(
      now_time: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    dateOver(
      index: PromiseOrValue<BigNumberish>,
      now_time: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getTotal(overrides?: CallOverrides): Promise<number>;

    judgeAccess(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    proposalInitiate(
      duration: PromiseOrValue<BigNumberish>,
      name: PromiseOrValue<string>,
      introductions: PromiseOrValue<string>,
      start_time: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    proposals(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        string,
        BigNumber,
        BigNumber,
        string,
        string,
        number,
        number,
        number
      ] & {
        index: number;
        proposer: string;
        start_time: BigNumber;
        duration: BigNumber;
        name: string;
        introductions: string;
        agree: number;
        disagree: number;
        state: number;
      }
    >;

    vote(
      user_choice: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      now_time: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    voted_person(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "ProposalInitiated(uint32)"(
      proposalIndex?: null
    ): ProposalInitiatedEventFilter;
    ProposalInitiated(proposalIndex?: null): ProposalInitiatedEventFilter;
  };

  estimateGas: {
    ACCESS_GAIN(overrides?: CallOverrides): Promise<BigNumber>;

    PROPOSAL_COST(overrides?: CallOverrides): Promise<BigNumber>;

    START_GAIN(overrides?: CallOverrides): Promise<BigNumber>;

    STATE_ACCESS(overrides?: CallOverrides): Promise<BigNumber>;

    STATE_UNACCESS(overrides?: CallOverrides): Promise<BigNumber>;

    STATE_VOTING(overrides?: CallOverrides): Promise<BigNumber>;

    UseLess(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    VOTE_COST(overrides?: CallOverrides): Promise<BigNumber>;

    access_proposals_number(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    airdrop(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkDate(
      now_time: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    dateOver(
      index: PromiseOrValue<BigNumberish>,
      now_time: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getTotal(overrides?: CallOverrides): Promise<BigNumber>;

    judgeAccess(
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    proposalInitiate(
      duration: PromiseOrValue<BigNumberish>,
      name: PromiseOrValue<string>,
      introductions: PromiseOrValue<string>,
      start_time: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    proposals(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vote(
      user_choice: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      now_time: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    voted_person(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ACCESS_GAIN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PROPOSAL_COST(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    START_GAIN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    STATE_ACCESS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    STATE_UNACCESS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    STATE_VOTING(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    UseLess(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    VOTE_COST(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    access_proposals_number(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    airdrop(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkDate(
      now_time: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    dateOver(
      index: PromiseOrValue<BigNumberish>,
      now_time: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getTotal(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    judgeAccess(
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    proposalInitiate(
      duration: PromiseOrValue<BigNumberish>,
      name: PromiseOrValue<string>,
      introductions: PromiseOrValue<string>,
      start_time: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    proposals(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vote(
      user_choice: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      now_time: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    voted_person(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
